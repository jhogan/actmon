//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DAC.WindowWatchers {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Conf : DataSet {
        
        private MonitorsDataTable tableMonitors;
        
        private MonitorDataTable tableMonitor;
        
        private ThreshholdDataTable tableThreshhold;
        
        private DistListsDataTable tableDistLists;
        
        private DistListDataTable tableDistList;
        
        private KVPsDataTable tableKVPs;
        
        private KVPDataTable tableKVP;
        
        private DataRelation relationMonitor_Threshhold;
        
        private DataRelation relationMonitors_Monitor;
        
        private DataRelation relationDistLists_DistList;
        
        private DataRelation relationKVPs_KVP;
        
        public Conf() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Conf(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Monitors"] != null)) {
                    this.Tables.Add(new MonitorsDataTable(ds.Tables["Monitors"]));
                }
                if ((ds.Tables["Monitor"] != null)) {
                    this.Tables.Add(new MonitorDataTable(ds.Tables["Monitor"]));
                }
                if ((ds.Tables["Threshhold"] != null)) {
                    this.Tables.Add(new ThreshholdDataTable(ds.Tables["Threshhold"]));
                }
                if ((ds.Tables["DistLists"] != null)) {
                    this.Tables.Add(new DistListsDataTable(ds.Tables["DistLists"]));
                }
                if ((ds.Tables["DistList"] != null)) {
                    this.Tables.Add(new DistListDataTable(ds.Tables["DistList"]));
                }
                if ((ds.Tables["KVPs"] != null)) {
                    this.Tables.Add(new KVPsDataTable(ds.Tables["KVPs"]));
                }
                if ((ds.Tables["KVP"] != null)) {
                    this.Tables.Add(new KVPDataTable(ds.Tables["KVP"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MonitorsDataTable Monitors {
            get {
                return this.tableMonitors;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MonitorDataTable Monitor {
            get {
                return this.tableMonitor;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ThreshholdDataTable Threshhold {
            get {
                return this.tableThreshhold;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DistListsDataTable DistLists {
            get {
                return this.tableDistLists;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DistListDataTable DistList {
            get {
                return this.tableDistList;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KVPsDataTable KVPs {
            get {
                return this.tableKVPs;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KVPDataTable KVP {
            get {
                return this.tableKVP;
            }
        }
        
        public override DataSet Clone() {
            Conf cln = ((Conf)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Monitors"] != null)) {
                this.Tables.Add(new MonitorsDataTable(ds.Tables["Monitors"]));
            }
            if ((ds.Tables["Monitor"] != null)) {
                this.Tables.Add(new MonitorDataTable(ds.Tables["Monitor"]));
            }
            if ((ds.Tables["Threshhold"] != null)) {
                this.Tables.Add(new ThreshholdDataTable(ds.Tables["Threshhold"]));
            }
            if ((ds.Tables["DistLists"] != null)) {
                this.Tables.Add(new DistListsDataTable(ds.Tables["DistLists"]));
            }
            if ((ds.Tables["DistList"] != null)) {
                this.Tables.Add(new DistListDataTable(ds.Tables["DistList"]));
            }
            if ((ds.Tables["KVPs"] != null)) {
                this.Tables.Add(new KVPsDataTable(ds.Tables["KVPs"]));
            }
            if ((ds.Tables["KVP"] != null)) {
                this.Tables.Add(new KVPDataTable(ds.Tables["KVP"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableMonitors = ((MonitorsDataTable)(this.Tables["Monitors"]));
            if ((this.tableMonitors != null)) {
                this.tableMonitors.InitVars();
            }
            this.tableMonitor = ((MonitorDataTable)(this.Tables["Monitor"]));
            if ((this.tableMonitor != null)) {
                this.tableMonitor.InitVars();
            }
            this.tableThreshhold = ((ThreshholdDataTable)(this.Tables["Threshhold"]));
            if ((this.tableThreshhold != null)) {
                this.tableThreshhold.InitVars();
            }
            this.tableDistLists = ((DistListsDataTable)(this.Tables["DistLists"]));
            if ((this.tableDistLists != null)) {
                this.tableDistLists.InitVars();
            }
            this.tableDistList = ((DistListDataTable)(this.Tables["DistList"]));
            if ((this.tableDistList != null)) {
                this.tableDistList.InitVars();
            }
            this.tableKVPs = ((KVPsDataTable)(this.Tables["KVPs"]));
            if ((this.tableKVPs != null)) {
                this.tableKVPs.InitVars();
            }
            this.tableKVP = ((KVPDataTable)(this.Tables["KVP"]));
            if ((this.tableKVP != null)) {
                this.tableKVP.InitVars();
            }
            this.relationMonitor_Threshhold = this.Relations["Monitor_Threshhold"];
            this.relationMonitors_Monitor = this.Relations["Monitors_Monitor"];
            this.relationDistLists_DistList = this.Relations["DistLists_DistList"];
            this.relationKVPs_KVP = this.Relations["KVPs_KVP"];
        }
        
        private void InitClass() {
            this.DataSetName = "Conf";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Conf.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableMonitors = new MonitorsDataTable();
            this.Tables.Add(this.tableMonitors);
            this.tableMonitor = new MonitorDataTable();
            this.Tables.Add(this.tableMonitor);
            this.tableThreshhold = new ThreshholdDataTable();
            this.Tables.Add(this.tableThreshhold);
            this.tableDistLists = new DistListsDataTable();
            this.Tables.Add(this.tableDistLists);
            this.tableDistList = new DistListDataTable();
            this.Tables.Add(this.tableDistList);
            this.tableKVPs = new KVPsDataTable();
            this.Tables.Add(this.tableKVPs);
            this.tableKVP = new KVPDataTable();
            this.Tables.Add(this.tableKVP);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("Monitors_Monitor", new DataColumn[] {
                        this.tableMonitors.Monitors_IdColumn}, new DataColumn[] {
                        this.tableMonitor.Monitors_IdColumn});
            this.tableMonitor.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Monitor_Threshhold", new DataColumn[] {
                        this.tableMonitor.Monitor_IdColumn}, new DataColumn[] {
                        this.tableThreshhold.Monitor_IdColumn});
            this.tableThreshhold.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("DistLists_DistList", new DataColumn[] {
                        this.tableDistLists.DistLists_IdColumn}, new DataColumn[] {
                        this.tableDistList.DistLists_IdColumn});
            this.tableDistList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("KVPs_KVP", new DataColumn[] {
                        this.tableKVPs.KVPs_IdColumn}, new DataColumn[] {
                        this.tableKVP.KVPs_IdColumn});
            this.tableKVP.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationMonitor_Threshhold = new DataRelation("Monitor_Threshhold", new DataColumn[] {
                        this.tableMonitor.Monitor_IdColumn}, new DataColumn[] {
                        this.tableThreshhold.Monitor_IdColumn}, false);
            this.relationMonitor_Threshhold.Nested = true;
            this.Relations.Add(this.relationMonitor_Threshhold);
            this.relationMonitors_Monitor = new DataRelation("Monitors_Monitor", new DataColumn[] {
                        this.tableMonitors.Monitors_IdColumn}, new DataColumn[] {
                        this.tableMonitor.Monitors_IdColumn}, false);
            this.relationMonitors_Monitor.Nested = true;
            this.Relations.Add(this.relationMonitors_Monitor);
            this.relationDistLists_DistList = new DataRelation("DistLists_DistList", new DataColumn[] {
                        this.tableDistLists.DistLists_IdColumn}, new DataColumn[] {
                        this.tableDistList.DistLists_IdColumn}, false);
            this.relationDistLists_DistList.Nested = true;
            this.Relations.Add(this.relationDistLists_DistList);
            this.relationKVPs_KVP = new DataRelation("KVPs_KVP", new DataColumn[] {
                        this.tableKVPs.KVPs_IdColumn}, new DataColumn[] {
                        this.tableKVP.KVPs_IdColumn}, false);
            this.relationKVPs_KVP.Nested = true;
            this.Relations.Add(this.relationKVPs_KVP);
        }
        
        private bool ShouldSerializeMonitors() {
            return false;
        }
        
        private bool ShouldSerializeMonitor() {
            return false;
        }
        
        private bool ShouldSerializeThreshhold() {
            return false;
        }
        
        private bool ShouldSerializeDistLists() {
            return false;
        }
        
        private bool ShouldSerializeDistList() {
            return false;
        }
        
        private bool ShouldSerializeKVPs() {
            return false;
        }
        
        private bool ShouldSerializeKVP() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void MonitorsRowChangeEventHandler(object sender, MonitorsRowChangeEvent e);
        
        public delegate void MonitorRowChangeEventHandler(object sender, MonitorRowChangeEvent e);
        
        public delegate void ThreshholdRowChangeEventHandler(object sender, ThreshholdRowChangeEvent e);
        
        public delegate void DistListsRowChangeEventHandler(object sender, DistListsRowChangeEvent e);
        
        public delegate void DistListRowChangeEventHandler(object sender, DistListRowChangeEvent e);
        
        public delegate void KVPsRowChangeEventHandler(object sender, KVPsRowChangeEvent e);
        
        public delegate void KVPRowChangeEventHandler(object sender, KVPRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MonitorsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnMonitors_Id;
            
            internal MonitorsDataTable() : 
                    base("Monitors") {
                this.InitClass();
            }
            
            internal MonitorsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Monitors_IdColumn {
                get {
                    return this.columnMonitors_Id;
                }
            }
            
            public MonitorsRow this[int index] {
                get {
                    return ((MonitorsRow)(this.Rows[index]));
                }
            }
            
            public event MonitorsRowChangeEventHandler MonitorsRowChanged;
            
            public event MonitorsRowChangeEventHandler MonitorsRowChanging;
            
            public event MonitorsRowChangeEventHandler MonitorsRowDeleted;
            
            public event MonitorsRowChangeEventHandler MonitorsRowDeleting;
            
            public void AddMonitorsRow(MonitorsRow row) {
                this.Rows.Add(row);
            }
            
            public MonitorsRow AddMonitorsRow() {
                MonitorsRow rowMonitorsRow = ((MonitorsRow)(this.NewRow()));
                rowMonitorsRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowMonitorsRow);
                return rowMonitorsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MonitorsDataTable cln = ((MonitorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MonitorsDataTable();
            }
            
            internal void InitVars() {
                this.columnMonitors_Id = this.Columns["Monitors_Id"];
            }
            
            private void InitClass() {
                this.columnMonitors_Id = new DataColumn("Monitors_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnMonitors_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnMonitors_Id}, true));
                this.columnMonitors_Id.AutoIncrement = true;
                this.columnMonitors_Id.AllowDBNull = false;
                this.columnMonitors_Id.Unique = true;
            }
            
            public MonitorsRow NewMonitorsRow() {
                return ((MonitorsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MonitorsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MonitorsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MonitorsRowChanged != null)) {
                    this.MonitorsRowChanged(this, new MonitorsRowChangeEvent(((MonitorsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MonitorsRowChanging != null)) {
                    this.MonitorsRowChanging(this, new MonitorsRowChangeEvent(((MonitorsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MonitorsRowDeleted != null)) {
                    this.MonitorsRowDeleted(this, new MonitorsRowChangeEvent(((MonitorsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MonitorsRowDeleting != null)) {
                    this.MonitorsRowDeleting(this, new MonitorsRowChangeEvent(((MonitorsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMonitorsRow(MonitorsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MonitorsRow : DataRow {
            
            private MonitorsDataTable tableMonitors;
            
            internal MonitorsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMonitors = ((MonitorsDataTable)(this.Table));
            }
            
            public MonitorRow[] GetMonitorRows() {
                return ((MonitorRow[])(this.GetChildRows(this.Table.ChildRelations["Monitors_Monitor"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MonitorsRowChangeEvent : EventArgs {
            
            private MonitorsRow eventRow;
            
            private DataRowAction eventAction;
            
            public MonitorsRowChangeEvent(MonitorsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MonitorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MonitorDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnid;
            
            private DataColumn columnpollInterval;
            
            private DataColumn columnname;
            
            private DataColumn columnlocation;
            
            private DataColumn columnserver;
            
            private DataColumn columnperfCatagory;
            
            private DataColumn columnperfCounterName;
            
            private DataColumn columnperfInstanceName;
            
            private DataColumn columntype;
            
            private DataColumn columnDescription;
            
            private DataColumn columndistList;
            
            private DataColumn columnMonitor_Id;
            
            private DataColumn columnMonitors_Id;
            
            internal MonitorDataTable() : 
                    base("Monitor") {
                this.InitClass();
            }
            
            internal MonitorDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            internal DataColumn pollIntervalColumn {
                get {
                    return this.columnpollInterval;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn locationColumn {
                get {
                    return this.columnlocation;
                }
            }
            
            internal DataColumn serverColumn {
                get {
                    return this.columnserver;
                }
            }
            
            internal DataColumn perfCatagoryColumn {
                get {
                    return this.columnperfCatagory;
                }
            }
            
            internal DataColumn perfCounterNameColumn {
                get {
                    return this.columnperfCounterName;
                }
            }
            
            internal DataColumn perfInstanceNameColumn {
                get {
                    return this.columnperfInstanceName;
                }
            }
            
            internal DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn distListColumn {
                get {
                    return this.columndistList;
                }
            }
            
            internal DataColumn Monitor_IdColumn {
                get {
                    return this.columnMonitor_Id;
                }
            }
            
            internal DataColumn Monitors_IdColumn {
                get {
                    return this.columnMonitors_Id;
                }
            }
            
            public MonitorRow this[int index] {
                get {
                    return ((MonitorRow)(this.Rows[index]));
                }
            }
            
            public event MonitorRowChangeEventHandler MonitorRowChanged;
            
            public event MonitorRowChangeEventHandler MonitorRowChanging;
            
            public event MonitorRowChangeEventHandler MonitorRowDeleted;
            
            public event MonitorRowChangeEventHandler MonitorRowDeleting;
            
            public void AddMonitorRow(MonitorRow row) {
                this.Rows.Add(row);
            }
            
            public MonitorRow AddMonitorRow(int pollInterval, string name, string location, string server, string perfCatagory, string perfCounterName, string perfInstanceName, string type, string Description, int distList, MonitorsRow parentMonitorsRowByMonitors_Monitor) {
                MonitorRow rowMonitorRow = ((MonitorRow)(this.NewRow()));
                rowMonitorRow.ItemArray = new object[] {
                        null,
                        pollInterval,
                        name,
                        location,
                        server,
                        perfCatagory,
                        perfCounterName,
                        perfInstanceName,
                        type,
                        Description,
                        distList,
                        null,
                        parentMonitorsRowByMonitors_Monitor[0]};
                this.Rows.Add(rowMonitorRow);
                return rowMonitorRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MonitorDataTable cln = ((MonitorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MonitorDataTable();
            }
            
            internal void InitVars() {
                this.columnid = this.Columns["id"];
                this.columnpollInterval = this.Columns["pollInterval"];
                this.columnname = this.Columns["name"];
                this.columnlocation = this.Columns["location"];
                this.columnserver = this.Columns["server"];
                this.columnperfCatagory = this.Columns["perfCatagory"];
                this.columnperfCounterName = this.Columns["perfCounterName"];
                this.columnperfInstanceName = this.Columns["perfInstanceName"];
                this.columntype = this.Columns["type"];
                this.columnDescription = this.Columns["Description"];
                this.columndistList = this.Columns["distList"];
                this.columnMonitor_Id = this.Columns["Monitor_Id"];
                this.columnMonitors_Id = this.Columns["Monitors_Id"];
            }
            
            private void InitClass() {
                this.columnid = new DataColumn("id", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnid);
                this.columnpollInterval = new DataColumn("pollInterval", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpollInterval);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.columnlocation = new DataColumn("location", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlocation);
                this.columnserver = new DataColumn("server", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnserver);
                this.columnperfCatagory = new DataColumn("perfCatagory", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnperfCatagory);
                this.columnperfCounterName = new DataColumn("perfCounterName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnperfCounterName);
                this.columnperfInstanceName = new DataColumn("perfInstanceName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnperfInstanceName);
                this.columntype = new DataColumn("type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntype);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columndistList = new DataColumn("distList", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndistList);
                this.columnMonitor_Id = new DataColumn("Monitor_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnMonitor_Id);
                this.columnMonitors_Id = new DataColumn("Monitors_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnMonitors_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnMonitor_Id}, true));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.Namespace = "";
                this.columntype.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columndistList.AllowDBNull = false;
                this.columnMonitor_Id.AutoIncrement = true;
                this.columnMonitor_Id.AllowDBNull = false;
                this.columnMonitor_Id.Unique = true;
            }
            
            public MonitorRow NewMonitorRow() {
                return ((MonitorRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MonitorRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MonitorRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MonitorRowChanged != null)) {
                    this.MonitorRowChanged(this, new MonitorRowChangeEvent(((MonitorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MonitorRowChanging != null)) {
                    this.MonitorRowChanging(this, new MonitorRowChangeEvent(((MonitorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MonitorRowDeleted != null)) {
                    this.MonitorRowDeleted(this, new MonitorRowChangeEvent(((MonitorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MonitorRowDeleting != null)) {
                    this.MonitorRowDeleting(this, new MonitorRowChangeEvent(((MonitorRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMonitorRow(MonitorRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MonitorRow : DataRow {
            
            private MonitorDataTable tableMonitor;
            
            internal MonitorRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMonitor = ((MonitorDataTable)(this.Table));
            }
            
            public int id {
                get {
                    try {
                        return ((int)(this[this.tableMonitor.idColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMonitor.idColumn] = value;
                }
            }
            
            public int pollInterval {
                get {
                    try {
                        return ((int)(this[this.tableMonitor.pollIntervalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMonitor.pollIntervalColumn] = value;
                }
            }
            
            public string name {
                get {
                    if (this.IsnameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableMonitor.nameColumn]));
                    }
                }
                set {
                    this[this.tableMonitor.nameColumn] = value;
                }
            }
            
            public string location {
                get {
                    try {
                        return ((string)(this[this.tableMonitor.locationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMonitor.locationColumn] = value;
                }
            }
            
            public string server {
                get {
                    try {
                        return ((string)(this[this.tableMonitor.serverColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMonitor.serverColumn] = value;
                }
            }
            
            public string perfCatagory {
                get {
                    try {
                        return ((string)(this[this.tableMonitor.perfCatagoryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMonitor.perfCatagoryColumn] = value;
                }
            }
            
            public string perfCounterName {
                get {
                    try {
                        return ((string)(this[this.tableMonitor.perfCounterNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMonitor.perfCounterNameColumn] = value;
                }
            }
            
            public string perfInstanceName {
                get {
                    try {
                        return ((string)(this[this.tableMonitor.perfInstanceNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMonitor.perfInstanceNameColumn] = value;
                }
            }
            
            public string type {
                get {
                    return ((string)(this[this.tableMonitor.typeColumn]));
                }
                set {
                    this[this.tableMonitor.typeColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableMonitor.DescriptionColumn]));
                }
                set {
                    this[this.tableMonitor.DescriptionColumn] = value;
                }
            }
            
            public int distList {
                get {
                    return ((int)(this[this.tableMonitor.distListColumn]));
                }
                set {
                    this[this.tableMonitor.distListColumn] = value;
                }
            }
            
            public MonitorsRow MonitorsRow {
                get {
                    return ((MonitorsRow)(this.GetParentRow(this.Table.ParentRelations["Monitors_Monitor"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Monitors_Monitor"]);
                }
            }
            
            public bool IsidNull() {
                return this.IsNull(this.tableMonitor.idColumn);
            }
            
            public void SetidNull() {
                this[this.tableMonitor.idColumn] = System.Convert.DBNull;
            }
            
            public bool IspollIntervalNull() {
                return this.IsNull(this.tableMonitor.pollIntervalColumn);
            }
            
            public void SetpollIntervalNull() {
                this[this.tableMonitor.pollIntervalColumn] = System.Convert.DBNull;
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tableMonitor.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tableMonitor.nameColumn] = System.Convert.DBNull;
            }
            
            public bool IslocationNull() {
                return this.IsNull(this.tableMonitor.locationColumn);
            }
            
            public void SetlocationNull() {
                this[this.tableMonitor.locationColumn] = System.Convert.DBNull;
            }
            
            public bool IsserverNull() {
                return this.IsNull(this.tableMonitor.serverColumn);
            }
            
            public void SetserverNull() {
                this[this.tableMonitor.serverColumn] = System.Convert.DBNull;
            }
            
            public bool IsperfCatagoryNull() {
                return this.IsNull(this.tableMonitor.perfCatagoryColumn);
            }
            
            public void SetperfCatagoryNull() {
                this[this.tableMonitor.perfCatagoryColumn] = System.Convert.DBNull;
            }
            
            public bool IsperfCounterNameNull() {
                return this.IsNull(this.tableMonitor.perfCounterNameColumn);
            }
            
            public void SetperfCounterNameNull() {
                this[this.tableMonitor.perfCounterNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsperfInstanceNameNull() {
                return this.IsNull(this.tableMonitor.perfInstanceNameColumn);
            }
            
            public void SetperfInstanceNameNull() {
                this[this.tableMonitor.perfInstanceNameColumn] = System.Convert.DBNull;
            }
            
            public ThreshholdRow[] GetThreshholdRows() {
                return ((ThreshholdRow[])(this.GetChildRows(this.Table.ChildRelations["Monitor_Threshhold"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MonitorRowChangeEvent : EventArgs {
            
            private MonitorRow eventRow;
            
            private DataRowAction eventAction;
            
            public MonitorRowChangeEvent(MonitorRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MonitorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ThreshholdDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnValue;
            
            private DataColumn columnDuaration;
            
            private DataColumn columnType;
            
            private DataColumn columnseverity;
            
            private DataColumn columnstartAt;
            
            private DataColumn columnendAt;
            
            private DataColumn columnExceededPause;
            
            private DataColumn columnConsecutive;
            
            private DataColumn columnExpression;
            
            private DataColumn columnCount;
            
            private DataColumn columnDescription;
            
            private DataColumn columnComparativeOperator;
            
            private DataColumn columnEnabled;
            
            private DataColumn columndistList;
            
            private DataColumn columnMonitor_Id;
            
            internal ThreshholdDataTable() : 
                    base("Threshhold") {
                this.InitClass();
            }
            
            internal ThreshholdDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            internal DataColumn DuarationColumn {
                get {
                    return this.columnDuaration;
                }
            }
            
            internal DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            internal DataColumn severityColumn {
                get {
                    return this.columnseverity;
                }
            }
            
            internal DataColumn startAtColumn {
                get {
                    return this.columnstartAt;
                }
            }
            
            internal DataColumn endAtColumn {
                get {
                    return this.columnendAt;
                }
            }
            
            internal DataColumn ExceededPauseColumn {
                get {
                    return this.columnExceededPause;
                }
            }
            
            internal DataColumn ConsecutiveColumn {
                get {
                    return this.columnConsecutive;
                }
            }
            
            internal DataColumn ExpressionColumn {
                get {
                    return this.columnExpression;
                }
            }
            
            internal DataColumn CountColumn {
                get {
                    return this.columnCount;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn ComparativeOperatorColumn {
                get {
                    return this.columnComparativeOperator;
                }
            }
            
            internal DataColumn EnabledColumn {
                get {
                    return this.columnEnabled;
                }
            }
            
            internal DataColumn distListColumn {
                get {
                    return this.columndistList;
                }
            }
            
            internal DataColumn Monitor_IdColumn {
                get {
                    return this.columnMonitor_Id;
                }
            }
            
            public ThreshholdRow this[int index] {
                get {
                    return ((ThreshholdRow)(this.Rows[index]));
                }
            }
            
            public event ThreshholdRowChangeEventHandler ThreshholdRowChanged;
            
            public event ThreshholdRowChangeEventHandler ThreshholdRowChanging;
            
            public event ThreshholdRowChangeEventHandler ThreshholdRowDeleted;
            
            public event ThreshholdRowChangeEventHandler ThreshholdRowDeleting;
            
            public void AddThreshholdRow(ThreshholdRow row) {
                this.Rows.Add(row);
            }
            
            public ThreshholdRow AddThreshholdRow(System.Single Value, int Duaration, string Type, int severity, System.DateTime startAt, System.DateTime endAt, System.Double ExceededPause, bool Consecutive, string Expression, int Count, string Description, string ComparativeOperator, bool Enabled, int distList, MonitorRow parentMonitorRowByMonitor_Threshhold) {
                ThreshholdRow rowThreshholdRow = ((ThreshholdRow)(this.NewRow()));
                rowThreshholdRow.ItemArray = new object[] {
                        Value,
                        Duaration,
                        Type,
                        severity,
                        startAt,
                        endAt,
                        ExceededPause,
                        Consecutive,
                        Expression,
                        Count,
                        Description,
                        ComparativeOperator,
                        Enabled,
                        distList,
                        parentMonitorRowByMonitor_Threshhold[11]};
                this.Rows.Add(rowThreshholdRow);
                return rowThreshholdRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ThreshholdDataTable cln = ((ThreshholdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ThreshholdDataTable();
            }
            
            internal void InitVars() {
                this.columnValue = this.Columns["Value"];
                this.columnDuaration = this.Columns["Duaration"];
                this.columnType = this.Columns["Type"];
                this.columnseverity = this.Columns["severity"];
                this.columnstartAt = this.Columns["startAt"];
                this.columnendAt = this.Columns["endAt"];
                this.columnExceededPause = this.Columns["ExceededPause"];
                this.columnConsecutive = this.Columns["Consecutive"];
                this.columnExpression = this.Columns["Expression"];
                this.columnCount = this.Columns["Count"];
                this.columnDescription = this.Columns["Description"];
                this.columnComparativeOperator = this.Columns["ComparativeOperator"];
                this.columnEnabled = this.Columns["Enabled"];
                this.columndistList = this.Columns["distList"];
                this.columnMonitor_Id = this.Columns["Monitor_Id"];
            }
            
            private void InitClass() {
                this.columnValue = new DataColumn("Value", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnValue);
                this.columnDuaration = new DataColumn("Duaration", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDuaration);
                this.columnType = new DataColumn("Type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnType);
                this.columnseverity = new DataColumn("severity", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnseverity);
                this.columnstartAt = new DataColumn("startAt", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstartAt);
                this.columnendAt = new DataColumn("endAt", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnendAt);
                this.columnExceededPause = new DataColumn("ExceededPause", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExceededPause);
                this.columnConsecutive = new DataColumn("Consecutive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConsecutive);
                this.columnExpression = new DataColumn("Expression", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpression);
                this.columnCount = new DataColumn("Count", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCount);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnComparativeOperator = new DataColumn("ComparativeOperator", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnComparativeOperator);
                this.columnEnabled = new DataColumn("Enabled", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEnabled);
                this.columndistList = new DataColumn("distList", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndistList);
                this.columnMonitor_Id = new DataColumn("Monitor_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnMonitor_Id);
                this.columnseverity.AllowDBNull = false;
                this.columnExceededPause.AllowDBNull = false;
                this.columnConsecutive.AllowDBNull = false;
                this.columnEnabled.AllowDBNull = false;
            }
            
            public ThreshholdRow NewThreshholdRow() {
                return ((ThreshholdRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ThreshholdRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ThreshholdRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ThreshholdRowChanged != null)) {
                    this.ThreshholdRowChanged(this, new ThreshholdRowChangeEvent(((ThreshholdRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ThreshholdRowChanging != null)) {
                    this.ThreshholdRowChanging(this, new ThreshholdRowChangeEvent(((ThreshholdRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ThreshholdRowDeleted != null)) {
                    this.ThreshholdRowDeleted(this, new ThreshholdRowChangeEvent(((ThreshholdRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ThreshholdRowDeleting != null)) {
                    this.ThreshholdRowDeleting(this, new ThreshholdRowChangeEvent(((ThreshholdRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveThreshholdRow(ThreshholdRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ThreshholdRow : DataRow {
            
            private ThreshholdDataTable tableThreshhold;
            
            internal ThreshholdRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableThreshhold = ((ThreshholdDataTable)(this.Table));
            }
            
            public System.Single Value {
                get {
                    try {
                        return ((System.Single)(this[this.tableThreshhold.ValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableThreshhold.ValueColumn] = value;
                }
            }
            
            public int Duaration {
                get {
                    try {
                        return ((int)(this[this.tableThreshhold.DuarationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableThreshhold.DuarationColumn] = value;
                }
            }
            
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableThreshhold.TypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableThreshhold.TypeColumn] = value;
                }
            }
            
            public int severity {
                get {
                    return ((int)(this[this.tableThreshhold.severityColumn]));
                }
                set {
                    this[this.tableThreshhold.severityColumn] = value;
                }
            }
            
            public System.DateTime startAt {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableThreshhold.startAtColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableThreshhold.startAtColumn] = value;
                }
            }
            
            public System.DateTime endAt {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableThreshhold.endAtColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableThreshhold.endAtColumn] = value;
                }
            }
            
            public System.Double ExceededPause {
                get {
                    return ((System.Double)(this[this.tableThreshhold.ExceededPauseColumn]));
                }
                set {
                    this[this.tableThreshhold.ExceededPauseColumn] = value;
                }
            }
            
            public bool Consecutive {
                get {
                    return ((bool)(this[this.tableThreshhold.ConsecutiveColumn]));
                }
                set {
                    this[this.tableThreshhold.ConsecutiveColumn] = value;
                }
            }
            
            public string Expression {
                get {
                    try {
                        return ((string)(this[this.tableThreshhold.ExpressionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableThreshhold.ExpressionColumn] = value;
                }
            }
            
            public int Count {
                get {
                    try {
                        return ((int)(this[this.tableThreshhold.CountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableThreshhold.CountColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableThreshhold.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableThreshhold.DescriptionColumn] = value;
                }
            }
            
            public string ComparativeOperator {
                get {
                    try {
                        return ((string)(this[this.tableThreshhold.ComparativeOperatorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableThreshhold.ComparativeOperatorColumn] = value;
                }
            }
            
            public bool Enabled {
                get {
                    return ((bool)(this[this.tableThreshhold.EnabledColumn]));
                }
                set {
                    this[this.tableThreshhold.EnabledColumn] = value;
                }
            }
            
            public int distList {
                get {
                    try {
                        return ((int)(this[this.tableThreshhold.distListColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableThreshhold.distListColumn] = value;
                }
            }
            
            public MonitorRow MonitorRow {
                get {
                    return ((MonitorRow)(this.GetParentRow(this.Table.ParentRelations["Monitor_Threshhold"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Monitor_Threshhold"]);
                }
            }
            
            public bool IsValueNull() {
                return this.IsNull(this.tableThreshhold.ValueColumn);
            }
            
            public void SetValueNull() {
                this[this.tableThreshhold.ValueColumn] = System.Convert.DBNull;
            }
            
            public bool IsDuarationNull() {
                return this.IsNull(this.tableThreshhold.DuarationColumn);
            }
            
            public void SetDuarationNull() {
                this[this.tableThreshhold.DuarationColumn] = System.Convert.DBNull;
            }
            
            public bool IsTypeNull() {
                return this.IsNull(this.tableThreshhold.TypeColumn);
            }
            
            public void SetTypeNull() {
                this[this.tableThreshhold.TypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsstartAtNull() {
                return this.IsNull(this.tableThreshhold.startAtColumn);
            }
            
            public void SetstartAtNull() {
                this[this.tableThreshhold.startAtColumn] = System.Convert.DBNull;
            }
            
            public bool IsendAtNull() {
                return this.IsNull(this.tableThreshhold.endAtColumn);
            }
            
            public void SetendAtNull() {
                this[this.tableThreshhold.endAtColumn] = System.Convert.DBNull;
            }
            
            public bool IsExpressionNull() {
                return this.IsNull(this.tableThreshhold.ExpressionColumn);
            }
            
            public void SetExpressionNull() {
                this[this.tableThreshhold.ExpressionColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountNull() {
                return this.IsNull(this.tableThreshhold.CountColumn);
            }
            
            public void SetCountNull() {
                this[this.tableThreshhold.CountColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableThreshhold.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableThreshhold.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsComparativeOperatorNull() {
                return this.IsNull(this.tableThreshhold.ComparativeOperatorColumn);
            }
            
            public void SetComparativeOperatorNull() {
                this[this.tableThreshhold.ComparativeOperatorColumn] = System.Convert.DBNull;
            }
            
            public bool IsdistListNull() {
                return this.IsNull(this.tableThreshhold.distListColumn);
            }
            
            public void SetdistListNull() {
                this[this.tableThreshhold.distListColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ThreshholdRowChangeEvent : EventArgs {
            
            private ThreshholdRow eventRow;
            
            private DataRowAction eventAction;
            
            public ThreshholdRowChangeEvent(ThreshholdRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ThreshholdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DistListsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDistLists_Id;
            
            internal DistListsDataTable() : 
                    base("DistLists") {
                this.InitClass();
            }
            
            internal DistListsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DistLists_IdColumn {
                get {
                    return this.columnDistLists_Id;
                }
            }
            
            public DistListsRow this[int index] {
                get {
                    return ((DistListsRow)(this.Rows[index]));
                }
            }
            
            public event DistListsRowChangeEventHandler DistListsRowChanged;
            
            public event DistListsRowChangeEventHandler DistListsRowChanging;
            
            public event DistListsRowChangeEventHandler DistListsRowDeleted;
            
            public event DistListsRowChangeEventHandler DistListsRowDeleting;
            
            public void AddDistListsRow(DistListsRow row) {
                this.Rows.Add(row);
            }
            
            public DistListsRow AddDistListsRow() {
                DistListsRow rowDistListsRow = ((DistListsRow)(this.NewRow()));
                rowDistListsRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowDistListsRow);
                return rowDistListsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DistListsDataTable cln = ((DistListsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DistListsDataTable();
            }
            
            internal void InitVars() {
                this.columnDistLists_Id = this.Columns["DistLists_Id"];
            }
            
            private void InitClass() {
                this.columnDistLists_Id = new DataColumn("DistLists_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDistLists_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnDistLists_Id}, true));
                this.columnDistLists_Id.AutoIncrement = true;
                this.columnDistLists_Id.AllowDBNull = false;
                this.columnDistLists_Id.Unique = true;
            }
            
            public DistListsRow NewDistListsRow() {
                return ((DistListsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DistListsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DistListsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DistListsRowChanged != null)) {
                    this.DistListsRowChanged(this, new DistListsRowChangeEvent(((DistListsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DistListsRowChanging != null)) {
                    this.DistListsRowChanging(this, new DistListsRowChangeEvent(((DistListsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DistListsRowDeleted != null)) {
                    this.DistListsRowDeleted(this, new DistListsRowChangeEvent(((DistListsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DistListsRowDeleting != null)) {
                    this.DistListsRowDeleting(this, new DistListsRowChangeEvent(((DistListsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDistListsRow(DistListsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DistListsRow : DataRow {
            
            private DistListsDataTable tableDistLists;
            
            internal DistListsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDistLists = ((DistListsDataTable)(this.Table));
            }
            
            public DistListRow[] GetDistListRows() {
                return ((DistListRow[])(this.GetChildRows(this.Table.ChildRelations["DistLists_DistList"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DistListsRowChangeEvent : EventArgs {
            
            private DistListsRow eventRow;
            
            private DataRowAction eventAction;
            
            public DistListsRowChangeEvent(DistListsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DistListsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DistListDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDistListID;
            
            private DataColumn columnEmailAddresses;
            
            private DataColumn columnDesc;
            
            private DataColumn columnDistLists_Id;
            
            internal DistListDataTable() : 
                    base("DistList") {
                this.InitClass();
            }
            
            internal DistListDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DistListIDColumn {
                get {
                    return this.columnDistListID;
                }
            }
            
            internal DataColumn EmailAddressesColumn {
                get {
                    return this.columnEmailAddresses;
                }
            }
            
            internal DataColumn DescColumn {
                get {
                    return this.columnDesc;
                }
            }
            
            internal DataColumn DistLists_IdColumn {
                get {
                    return this.columnDistLists_Id;
                }
            }
            
            public DistListRow this[int index] {
                get {
                    return ((DistListRow)(this.Rows[index]));
                }
            }
            
            public event DistListRowChangeEventHandler DistListRowChanged;
            
            public event DistListRowChangeEventHandler DistListRowChanging;
            
            public event DistListRowChangeEventHandler DistListRowDeleted;
            
            public event DistListRowChangeEventHandler DistListRowDeleting;
            
            public void AddDistListRow(DistListRow row) {
                this.Rows.Add(row);
            }
            
            public DistListRow AddDistListRow(string EmailAddresses, string Desc, DistListsRow parentDistListsRowByDistLists_DistList) {
                DistListRow rowDistListRow = ((DistListRow)(this.NewRow()));
                rowDistListRow.ItemArray = new object[] {
                        null,
                        EmailAddresses,
                        Desc,
                        parentDistListsRowByDistLists_DistList[0]};
                this.Rows.Add(rowDistListRow);
                return rowDistListRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DistListDataTable cln = ((DistListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DistListDataTable();
            }
            
            internal void InitVars() {
                this.columnDistListID = this.Columns["DistListID"];
                this.columnEmailAddresses = this.Columns["EmailAddresses"];
                this.columnDesc = this.Columns["Desc"];
                this.columnDistLists_Id = this.Columns["DistLists_Id"];
            }
            
            private void InitClass() {
                this.columnDistListID = new DataColumn("DistListID", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDistListID);
                this.columnEmailAddresses = new DataColumn("EmailAddresses", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmailAddresses);
                this.columnDesc = new DataColumn("Desc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDesc);
                this.columnDistLists_Id = new DataColumn("DistLists_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDistLists_Id);
                this.columnDistListID.AutoIncrement = true;
                this.columnDistListID.AutoIncrementSeed = 1;
                this.columnDistListID.Namespace = "";
                this.columnEmailAddresses.AllowDBNull = false;
                this.columnDesc.AllowDBNull = false;
            }
            
            public DistListRow NewDistListRow() {
                return ((DistListRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DistListRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DistListRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DistListRowChanged != null)) {
                    this.DistListRowChanged(this, new DistListRowChangeEvent(((DistListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DistListRowChanging != null)) {
                    this.DistListRowChanging(this, new DistListRowChangeEvent(((DistListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DistListRowDeleted != null)) {
                    this.DistListRowDeleted(this, new DistListRowChangeEvent(((DistListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DistListRowDeleting != null)) {
                    this.DistListRowDeleting(this, new DistListRowChangeEvent(((DistListRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDistListRow(DistListRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DistListRow : DataRow {
            
            private DistListDataTable tableDistList;
            
            internal DistListRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDistList = ((DistListDataTable)(this.Table));
            }
            
            public int DistListID {
                get {
                    try {
                        return ((int)(this[this.tableDistList.DistListIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistList.DistListIDColumn] = value;
                }
            }
            
            public string EmailAddresses {
                get {
                    return ((string)(this[this.tableDistList.EmailAddressesColumn]));
                }
                set {
                    this[this.tableDistList.EmailAddressesColumn] = value;
                }
            }
            
            public string Desc {
                get {
                    return ((string)(this[this.tableDistList.DescColumn]));
                }
                set {
                    this[this.tableDistList.DescColumn] = value;
                }
            }
            
            public DistListsRow DistListsRow {
                get {
                    return ((DistListsRow)(this.GetParentRow(this.Table.ParentRelations["DistLists_DistList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DistLists_DistList"]);
                }
            }
            
            public bool IsDistListIDNull() {
                return this.IsNull(this.tableDistList.DistListIDColumn);
            }
            
            public void SetDistListIDNull() {
                this[this.tableDistList.DistListIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DistListRowChangeEvent : EventArgs {
            
            private DistListRow eventRow;
            
            private DataRowAction eventAction;
            
            public DistListRowChangeEvent(DistListRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DistListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class KVPsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnKVPs_Id;
            
            internal KVPsDataTable() : 
                    base("KVPs") {
                this.InitClass();
            }
            
            internal KVPsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn KVPs_IdColumn {
                get {
                    return this.columnKVPs_Id;
                }
            }
            
            public KVPsRow this[int index] {
                get {
                    return ((KVPsRow)(this.Rows[index]));
                }
            }
            
            public event KVPsRowChangeEventHandler KVPsRowChanged;
            
            public event KVPsRowChangeEventHandler KVPsRowChanging;
            
            public event KVPsRowChangeEventHandler KVPsRowDeleted;
            
            public event KVPsRowChangeEventHandler KVPsRowDeleting;
            
            public void AddKVPsRow(KVPsRow row) {
                this.Rows.Add(row);
            }
            
            public KVPsRow AddKVPsRow() {
                KVPsRow rowKVPsRow = ((KVPsRow)(this.NewRow()));
                rowKVPsRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowKVPsRow);
                return rowKVPsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                KVPsDataTable cln = ((KVPsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new KVPsDataTable();
            }
            
            internal void InitVars() {
                this.columnKVPs_Id = this.Columns["KVPs_Id"];
            }
            
            private void InitClass() {
                this.columnKVPs_Id = new DataColumn("KVPs_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnKVPs_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnKVPs_Id}, true));
                this.columnKVPs_Id.AutoIncrement = true;
                this.columnKVPs_Id.AllowDBNull = false;
                this.columnKVPs_Id.Unique = true;
            }
            
            public KVPsRow NewKVPsRow() {
                return ((KVPsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new KVPsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(KVPsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KVPsRowChanged != null)) {
                    this.KVPsRowChanged(this, new KVPsRowChangeEvent(((KVPsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KVPsRowChanging != null)) {
                    this.KVPsRowChanging(this, new KVPsRowChangeEvent(((KVPsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KVPsRowDeleted != null)) {
                    this.KVPsRowDeleted(this, new KVPsRowChangeEvent(((KVPsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KVPsRowDeleting != null)) {
                    this.KVPsRowDeleting(this, new KVPsRowChangeEvent(((KVPsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveKVPsRow(KVPsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class KVPsRow : DataRow {
            
            private KVPsDataTable tableKVPs;
            
            internal KVPsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableKVPs = ((KVPsDataTable)(this.Table));
            }
            
            public KVPRow[] GetKVPRows() {
                return ((KVPRow[])(this.GetChildRows(this.Table.ChildRelations["KVPs_KVP"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class KVPsRowChangeEvent : EventArgs {
            
            private KVPsRow eventRow;
            
            private DataRowAction eventAction;
            
            public KVPsRowChangeEvent(KVPsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public KVPsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class KVPDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnKey;
            
            private DataColumn columnValue;
            
            private DataColumn columnDesc;
            
            private DataColumn columnKVPs_Id;
            
            internal KVPDataTable() : 
                    base("KVP") {
                this.InitClass();
            }
            
            internal KVPDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn KeyColumn {
                get {
                    return this.columnKey;
                }
            }
            
            internal DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            internal DataColumn DescColumn {
                get {
                    return this.columnDesc;
                }
            }
            
            internal DataColumn KVPs_IdColumn {
                get {
                    return this.columnKVPs_Id;
                }
            }
            
            public KVPRow this[int index] {
                get {
                    return ((KVPRow)(this.Rows[index]));
                }
            }
            
            public event KVPRowChangeEventHandler KVPRowChanged;
            
            public event KVPRowChangeEventHandler KVPRowChanging;
            
            public event KVPRowChangeEventHandler KVPRowDeleted;
            
            public event KVPRowChangeEventHandler KVPRowDeleting;
            
            public void AddKVPRow(KVPRow row) {
                this.Rows.Add(row);
            }
            
            public KVPRow AddKVPRow(string Key, string Value, string Desc, KVPsRow parentKVPsRowByKVPs_KVP) {
                KVPRow rowKVPRow = ((KVPRow)(this.NewRow()));
                rowKVPRow.ItemArray = new object[] {
                        Key,
                        Value,
                        Desc,
                        parentKVPsRowByKVPs_KVP[0]};
                this.Rows.Add(rowKVPRow);
                return rowKVPRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                KVPDataTable cln = ((KVPDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new KVPDataTable();
            }
            
            internal void InitVars() {
                this.columnKey = this.Columns["Key"];
                this.columnValue = this.Columns["Value"];
                this.columnDesc = this.Columns["Desc"];
                this.columnKVPs_Id = this.Columns["KVPs_Id"];
            }
            
            private void InitClass() {
                this.columnKey = new DataColumn("Key", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnKey);
                this.columnValue = new DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnValue);
                this.columnDesc = new DataColumn("Desc", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDesc);
                this.columnKVPs_Id = new DataColumn("KVPs_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnKVPs_Id);
                this.columnKey.Namespace = "";
                this.columnValue.Namespace = "";
                this.columnDesc.Namespace = "";
            }
            
            public KVPRow NewKVPRow() {
                return ((KVPRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new KVPRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(KVPRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KVPRowChanged != null)) {
                    this.KVPRowChanged(this, new KVPRowChangeEvent(((KVPRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KVPRowChanging != null)) {
                    this.KVPRowChanging(this, new KVPRowChangeEvent(((KVPRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KVPRowDeleted != null)) {
                    this.KVPRowDeleted(this, new KVPRowChangeEvent(((KVPRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KVPRowDeleting != null)) {
                    this.KVPRowDeleting(this, new KVPRowChangeEvent(((KVPRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveKVPRow(KVPRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class KVPRow : DataRow {
            
            private KVPDataTable tableKVP;
            
            internal KVPRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableKVP = ((KVPDataTable)(this.Table));
            }
            
            public string Key {
                get {
                    try {
                        return ((string)(this[this.tableKVP.KeyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKVP.KeyColumn] = value;
                }
            }
            
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableKVP.ValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKVP.ValueColumn] = value;
                }
            }
            
            public string Desc {
                get {
                    try {
                        return ((string)(this[this.tableKVP.DescColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKVP.DescColumn] = value;
                }
            }
            
            public KVPsRow KVPsRow {
                get {
                    return ((KVPsRow)(this.GetParentRow(this.Table.ParentRelations["KVPs_KVP"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["KVPs_KVP"]);
                }
            }
            
            public bool IsKeyNull() {
                return this.IsNull(this.tableKVP.KeyColumn);
            }
            
            public void SetKeyNull() {
                this[this.tableKVP.KeyColumn] = System.Convert.DBNull;
            }
            
            public bool IsValueNull() {
                return this.IsNull(this.tableKVP.ValueColumn);
            }
            
            public void SetValueNull() {
                this[this.tableKVP.ValueColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescNull() {
                return this.IsNull(this.tableKVP.DescColumn);
            }
            
            public void SetDescNull() {
                this[this.tableKVP.DescColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class KVPRowChangeEvent : EventArgs {
            
            private KVPRow eventRow;
            
            private DataRowAction eventAction;
            
            public KVPRowChangeEvent(KVPRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public KVPRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
